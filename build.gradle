/* 
   JaCaMo Gradle build file

   https://github.com/jomifred/jacamo
   
*/

plugins {
  id "ca.coglinc.javacc" version "2.3.1"
  // see https://github.com/johnmartel/javaccPlugin
}

defaultTasks 'jar'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version '0.6-SNAPSHOT'
group   'org.jacamo'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
    
    maven {
        url "http://jacamo.sourceforge.net/maven2"
    }
}


dependencies {
    compile group: 'net.sf.jason', name: 'jason',    version: '2.0.beta', changing: true
    compile group: 'org.jacamo',   name: 'moise' ,   version: '0.9-SNAPSHOT', changing: true
    compile group: 'org.jacamo',   name: 'cartago' , version: '2.0.2'
    compile group: 'org.jacamo',   name: 'c4jason' , version: '2.0.2'

    runtime group: 'net.sf.ingenias', name: 'jade', version: '4.3'
    runtime group: 'org.apache.ant',  name: 'ant',  version: '1.9.7'
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jar {
    baseName 'jacamo'
    manifest {
        attributes 'Main-Class': 'jacamo.util.ConfigGUI',
                   'Class-Path': file(project.configurations.compile.find { it.name.startsWith("jason-") }).name
    }
    
    //from ( configurations.compile.collect { zipTree(it) } ) {
    //    include 'jason/**/*Factory.class', 'jason/**/Config.class'
    //}
    
    doFirst {
        Properties props = new Properties()
        props.put('version', '')
        props.put('release', project.version)
        props.store(new File(project.buildDir.absolutePath +'/classes/main/jacamo.dist.properties').newWriter(), null) 
    }
}

clean {
    delete 'bin'
    delete 'readme.html'
    delete 'release-notes.html'
    delete fileTree('doc/tutorials/hello-world')  { include '**/*.html'  }
    delete fileTree('doc/tutorials/coordination') { include '*.html'  }
    delete fileTree('doc/tutorials/gold-miners')  { include '**/*.html'  }
    delete fileTree('src')  { include '**/bin'  }
    delete fileTree('src')  { include '**/*.log'  }
}

task config (type: JavaExec, dependsOn: 'jar') {
    main = 'jacamo.util.Config'
    classpath sourceSets.main.runtimeClasspath
    workingDir project.buildDir.absolutePath + '/libs'
    
    doFirst {
        delete System.getProperty("user.home")+'/.jacamo'
        copy {
            from configurations.runtime
            into 'build/libs' 
        }
        copy {
            from 'scripts'
            into 'build/scripts'
            include '**'
        }
    }
    
    doLast {    
        println '------'
        println ''
        println 'you can set the JaCaMo home directory with the following command:'
        println '     export JACAMO_HOME='+project.buildDir.absolutePath 
        println ''
        println 'and also change your PATH with:' 
        println '     export PATH=$JACAMO_HOME/scripts:$PATH' 
        println ''
        println '-----'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            artifactId 'jacamo'
        }
    }
}

compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc/jacamo/project/parser')
}


jjdoc {
    outputDirectory = file(project.projectDir.absolutePath + '/doc')
    //arguments = [text: 'true']
}

// transfer local maven artifact to our maven2 repository at sourceforge
task publishMavenSF(dependsOn: [ 'build', 'publishToMavenLocal']) << {
    def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/jacamo'
    def tdir = 'jomifred,jacamo@web.sf.net:/home/project-web/jacamo/htdocs/maven2/org/jacamo/jacamo'
    exec {
        commandLine 'scp', '-r', project.version, tdir
        workingDir wdir
    }
    exec {
        commandLine 'cp', 'maven-metadata-local.xml', 'maven-metadata.xml'
        workingDir wdir
    }
    exec {
        commandLine 'scp', 'maven-metadata.xml', tdir
        workingDir wdir
    }
}

// Builds the distribution, documentation and a new release
task doc(dependsOn: [ 'jjdoc', 'javadoc', 'renderAsciiDocs']) << {
} 

task renderAsciiDocs(type: Exec) {
    commandLine 'find', '.', '-name', '*.adoc', '-exec', 'asciidoctor', '{}', ';'
}

// Builds the distribution, documentation and a new release
task release(dependsOn: [ 'build', 'doc', 'zipRel']) << {
} 

// copy files used to build a release
task copyRel << {
    copy {
        from '.'
        into 'build/jacamo-'+project.version
        include '*.html'
        include 'LICENSE'
        include 'scripts/**'
        include 'doc/**'
    }
    copy {
        from libsDir
        from configurations.runtime
        into 'build/jacamo-'+project.version+'/'+libsDirName
        include '**/*.jar'
    }
    copy {
        from docsDir
        into 'build/jacamo-'+project.version+'/doc'
    }
    copy {
        from 'src/examples'      
        into 'build/jacamo-'+project.version+'/src/examples' 
    }
    copy {
        from 'src/demos'      
        into 'build/jacamo-'+project.version+'/src/demos' 
    }
}

// creates a zip file for a release
task zipRel(type: Zip, dependsOn: copyRel) {
    from 'build/jacamo-'+project.version
    baseName 'jacamo'
}
